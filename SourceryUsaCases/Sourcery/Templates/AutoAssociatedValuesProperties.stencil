{% for enum in types.implementing.AutoEnumProperties|enum %}
{{ enum.accessLevel }} extension {{ enum.name }} {

  {% if enum.hasAssociatedValues %}
  {% for case in enum.cases %}
    {% if case.associatedValues.count == 1 %}
    {% for value in case.associatedValues %}
    var {{ case.name }}{{ value.localName|capitalize }}: {{value.typeName}}? {
        switch self {
             {% for internalCase in enum.cases %}
             {% if internalCase.hasAssociatedValue %}
             {% if internalCase.associatedValues != 1 %}
            case .{{internalCase.name}}({% for internalValue in internalCase.associatedValues %}{% if internalValue.localName == value.localName %}let {{value.localName}}{% endif %}{% if internalValue.localName != value.localName %}_{% endif %}{{ ',' if not forloop.last }}{{ ')' if forloop.last }}{% endfor %}:
                {% if internalCase.name == case.name %}
                return {% for returnValue in internalCase.associatedValues %}{% if returnValue.localName == value.localName %}{{ returnValue.localName }} {% endif %}{% if returnValue.localName != value.localName and forloop.last %}nil {% endif %}{% endfor %}
                {% endif %}
                {% if internalCase.name != case.name %}
                return nil
                {% endif %}
                {% endif %}
              {% endif %}
                {% if not internalCase.hasAssociatedValue %}
            case .{{internalCase.name}}: return nil
                {% endif %} 
             {% endfor %}
        }
    }
    {% endfor %}
    {% endif %}
  {% endfor %}
  {% endif %}

  {% if enum.hasAssociatedValues %}
  {% for case in enum.cases %}
    {% if case.hasAssociatedValue and case.associatedValues.count != 1%}
    var {{case.name}}AssociatedValues: {% for value in case.associatedValues %}{{ '(' if forloop.first }}{{ ' ' if not forloop.first }}{{value.localName}}: {{value.typeName}}{{ ',' if not forloop.last }}{{ ')' if forloop.last }}{% endfor %}? {
        switch self {
            {% for internalCase in enum.cases %}
            {% if internalCase.hasAssociatedValue %}
            {% if internalCase.name == case.name %}
            case .{{internalCase.name}}{% for value in internalCase.associatedValues %}{{ '(' if forloop.first }}{% if internalCase.name == case.name %}let {{value.localName}}{% endif %}{% if internalCase.name != case.name %}_{% endif %}{{ ',' if not forloop.last }}{{ ')' if forloop.last }}{% endfor %}:
                return {% for value in internalCase.associatedValues %}{{ '(' if forloop.first }}{{value.localName}}{{ ',' if not forloop.last }}{{ ')' if forloop.last }}{% endfor %}
                 {% endif %}
                 {% endif %}
            {{ 'default: return nil' if forloop.last }}
                 {% endfor %}
        }
    }
    {% endif %}
  {% endfor %}
  {% endif %}
}
{% endfor %}

{#
    Example:
    enum Vehicle: AutoCodable, AutoEnumProperties {
        case car(description: VehicleData, engineType: EngineType, drivetrain: DrivetrainType)
        case rocket(engines: Int)
    }

    internal extension Vehicle {

        var engines: Int? {
            switch self {
                 case .car(_,_,_):
                    return nil
                 case .rocket(let engines):
                    return engines
            }
        }

        var carAssociatedValues: (description: VehicleData, engineType: EngineType, drivetrain: DrivetrainType)? {
            switch self {
                case .car(let description,let engineType,let drivetrain):
                    return (description,engineType,drivetrain)
                default: return nil
            }
        }
    }
 #}

